% Neural network training
%
% Note: requires data sets generated by V_generate_friction_data.m

clear
close all

% Load custom colormaps
load("colors\viridis.mat")
load("colors\Set1.mat")
set(0, "DefaultAxesColorOrder", Set1)

% Load friction data sets
dataFull  = readtable("exponential_friction_model_samples_full.csv");
dataTrain = readtable("exponential_friction_model_samples_training.csv");
dataTest  = readtable("exponential_friction_model_samples_test.csv");

%% Regression neural network training
%  Train an optimized regression neural network model using the training
%  data set and the test data set for validation purposes

rnet = fitrnet(dataTrain, "Ff", ...
    "ValidationData", dataTest, ...
    "Activations",  "tanh", ...
    "Lambda",       4.534e-05, ...
    "LayerSizes",   [3 296], ...
    "Standardize",  true, ...
    "StoreHistory", true, ...
    "Verbose",      true);

% Plot the training mean squared error (MSE) and the validation MSE at each iteration
iteration = rnet.TrainingHistory.Iteration;
trainLosses = rnet.TrainingHistory.TrainingLoss;
valLosses = rnet.TrainingHistory.ValidationLoss;
subplot(1,3,1)
plot(iteration, trainLosses, iteration, valLosses)
legend(["Training", "Test"])
xlabel("Iteration")
ylabel("Mean Squared Error")

% Compare the predicted test set response values to the true response values
subplot(1,3,2)
testPredictions = predict(rnet, dataTest(:,1:2));
plot(dataTest.Ff, testPredictions, ".")
hold on
plot(dataTest.Ff, dataTest.Ff)
xlabel("True friction force F_f [N]")
ylabel("Predicted friction force F_f [N]")

% -- ecpdf
subplot(1,3,3)
cdfplot(dataTrain.Ff);
hold on;
cdfplot(testPredictions);
ylabel('emperical cumulative probability [-]');
xlabel("F_{f} [N]");
legend("True friction force", "Predicted friction force", "Location", "northwest")

%% Perform 5-fold cross-validation

% Train an optimized regression neural network model using the full data set
rnet = fitrnet(dataFull, "Ff", ...
    "Activations",  "tanh", ...
    "Lambda",       4.534e-05, ...
    "LayerSizes",   [3 296], ...
    "Standardize",  true);

partitionedModel = crossval(rnet, 'KFold', 5);

% Compute regression loss for observations not used for training
kfLoss = kfoldLoss(partitionedModel, "Mode", "individual", "LossFun", "mse");

% Compute max value, mean value and standard deviation of loss values
fprintf("5-fold cross-validation completed.\n")
fprintf("Maximum loss = %6.4f\n", max(kfLoss));
fprintf("Mean loss = %6.4f\n", mean(kfLoss));
fprintf("Standard deviation of loss values = %6.4f\n", std(kfLoss));
fprintf("Validation RMSE = %6.4f\n", sqrt(kflMean));

%% Plot predicted friction force
Fn = 100.0;  % Normal force                         (default: 100)
muk  = 0.2;  % Dynamic coeff of friction            (default: 0.2)
eps  = 1e-3; % Threshold value for sliding velocity (default: 1e-3)

% Sample friction coefficient and friction force
vs = linspace(-1.0, 1.0, 1e5)';
Xsample = table(Fn.*ones(size(vs)), vs, 'VariableNames', {'Fn','vs'});
Ff = predict(rnet, Xsample);

% Plot the friction force as function of relative sliding velocity
figure
plot(vs, Ff)
hold on
plot(vs, +Fn*muk*ones(size(vs)), '--', 'Color', [.5 .5 .5])
plot(vs, -Fn*muk*ones(size(vs)), '--', 'Color', [.5 .5 .5])
plot([+eps +eps], [-Fn +Fn], '--', 'Color', [.5 .5 .5])
plot([-eps -eps], [-Fn +Fn], '--', 'Color', [.5 .5 .5])
title('Friction force curve', 'F_n = 100N, \mu_k = 0.2')
xlabel('v_{s} [m/s]')
ylabel('F_f [N]')
xlim([-10*eps, 10*eps])
ylim([-Fn, Fn])
grid on
hold on

%% Plot reference curve
% fmodel.type = 'exponential';    % Choose between 'exponential' and 'polynomial'
% fmodel.a    = 5.0;              % Control parameter for the negative gradient of the friction curve (default: 5.0)
% fmodel.v0   = 0.3;              % Reference velocity if exponential decay is used   (default: 0.3) 
% fmodel.musd = 2.5;              % Ratio static to dynamic fric coeff, mu_st/mu_d    (default: 2.5)
% fmodel.mud  = 0.2;              % Dynamic coeff of friction, mu_d                   (default: 0.2)
% fmodel.muv  = 0.001;            % Linear strengthening parameter                    (default: 0.001)
% fmodel.eps  = 1e-3;             % Threshold value for sliding velocity              (default: 1e-3)
% 
% FfRef = getFrictionForce(Fn, vs, fmodel);
% plot(vs, FfRef)
% legend('Neural network prediction', 'Analytical friction model')
